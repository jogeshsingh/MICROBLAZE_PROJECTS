/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xparameters.h"

XGpio_Config *gpio_config ;
XGpio gpio ;



#define CHANNEL_2 2     // led's
#define CHANNEL_1 1     /// switches
#define MAX_LIMIT 32768 // denoting the maximum value of the 16th switch (2^15 = 32768) , as switch start from 0 to 15


void gpio_led_init() {


	gpio_config = XGpio_LookupConfig(XPAR_AXI_GPIO_0_DEVICE_ID);
    int status = XGpio_CfgInitialize(&gpio , gpio_config , gpio_config-> BaseAddress);

    // check initiailization status
    if (status == XST_SUCCESS){
        xil_printf("initialization success");
    }
    else
    {
    	xil_printf("error_in_initialization");
    }
 }


int main()
{

	 gpio_led_init() ;

	 XGpio_SetDataDirection(&gpio , CHANNEL_1 , 0xFFFF);  // switches -> input
	 XGpio_SetDataDirection(&gpio , CHANNEL_2 , 0x0000);  // led's    -> output

	 u32 data_read ;



     int temp = data_read ;

     int count =  0;



   while(1)
     {
	            data_read = XGpio_DiscreteRead(&gpio , CHANNEL_1) ;   // read the status of switches

	            xil_printf("Value read at switch %d is " , data_read);

	            XGpio_DiscreteWrite(&gpio , CHANNEL_2 , data_read);  // write data_read from switches to CHANNEL_2 (LED's)

       if (temp !=0)
         {
	        for (int i = 0; i<= MAX_LIMIT; i++)
	         {
	    	    temp = temp >>1 ;
	    	    count ++ ;
	         }

	            xil_printf("the button pressed is %d\n" , (count + temp));
         }
       else
         {
    	        xil_printf("the button pressed is %d\n" , (count + temp));
         }
    }

 }
